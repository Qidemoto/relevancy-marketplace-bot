import os
import requests
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import mistral_api  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å

load_dotenv()
logging.basicConfig(level=logging.INFO)

bot = Bot(os.getenv("TOKEN"))
dp = Dispatcher()


def search_wb(query):
    url = (
        "https://search.wb.ru/exactmatch/ru/common/v4/search"
        f"?query={query}&resultset=catalog&sort=popular&limit=30"
        f"&curr=rub&locale=ru&lang=ru&dest=12358512"
    )
    try:
        resp = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
        return resp.json().get("data", {}).get("products", [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []


@dp.message(CommandStart())
async def cmd_start(msg: types.Message):
    text = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "ü§ñ –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ <u>–ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä</u> –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        "üß™ –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ <b>—Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ</b> –∏ –∏—â—É —Ç–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –Ω–∞ <b>Wildberries</b>.\n\n"
        "üîç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<i>—Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º</i> –∏–ª–∏ <i>–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏</i> ‚Äî –∏ —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –æ—Ç–∑—ã–≤–∞–º –∏ —Ü–µ–Ω–µ! üí°"
    )
    await msg.answer(text, parse_mode=ParseMode.HTML)


@dp.message(F.text == "/about")
async def cmd_about(msg: types.Message):
    text = (
        "<b>‚ÑπÔ∏è –û –±–æ—Ç–µ</b>\n\n"
        "üîç –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏, —Ü–µ–Ω—ã, –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        "üß† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:\n"
        "‚Ä¢ Python + Aiogram\n"
        "‚Ä¢ –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤"
        "\n"
        "‚Ä¢ Wildberries API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
    )
    await msg.answer(text, parse_mode=ParseMode.HTML)



@dp.message(F.text)
async def handle_message(msg: types.Message):
    query = msg.text.strip()
    products_raw = search_wb(query)

    if not products_raw:
        await msg.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    products = []
    for p in products_raw:
        products.append({
            "id": p.get("id"),
            "title": p.get("name", ""),
            "brand": p.get("brand", "?"),
            "price": p.get("salePriceU", 0) / 100,
            "full_price": p.get("priceU", 0) / 100,
            "rating": p.get("reviewRating", 0),
            "reviews": p.get("feedbacks", 0),
            "url": f"https://www.wildberries.ru/catalog/{p.get('id')}/detail.aspx"
        })

    try:
        best_product, mistral_comment = mistral_api.get_best_product_with_comment(query, products)
    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral: {e}")
        return

    text = (
        f"<b>{best_product['title']}</b>\n"
        f"–ë—Ä–µ–Ω–¥: {best_product['brand']}\n"
        f"–¶–µ–Ω–∞: {best_product['price']:.2f} ‚ÇΩ (–¥–æ —Å–∫–∏–¥–∫–∏: {best_product['full_price']:.2f} ‚ÇΩ)\n"
        f"–†–µ–π—Ç–∏–Ω–≥: {best_product['rating']}‚≠ê\n({best_product['reviews']} –æ—Ç–∑—ã–≤–æ–≤)"
    )
    if mistral_comment:
        text += f"\n\n<i>{mistral_comment}</i>"

    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ Wildberries",
            url=best_product["url"]
        )
    )

    await msg.answer(text, parse_mode=ParseMode.HTML, reply_markup=kb.as_markup())


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
